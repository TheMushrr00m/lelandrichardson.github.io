{
  "data": {
    "site": {
      "siteMetadata": {
        "title": "Intelligible Babble",
        "author": "Leland Richardson"
      }
    },
    "markdownRemark": {
      "id": "450beaa9-cac2-5dbd-8b73-5ac6b3bb378b",
      "excerpt": "Is JavaScript a “functional” programming language? There is no magic formula for what makes a language “functional” or not.  There seem to…",
      "html": "<h2>Is JavaScript a “functional” programming language?</h2>\n<p>There is no magic formula for what makes a language “functional” or not.  There seem to be languages that are clearly functional, while there are others that <em>clearly</em> are not, but there is quite a bit of middle ground.</p>\n<p>So here are some common and important “ingredients” of functional languages (ingredients that JavaScript implements are in <strong>bold</strong>).</p>\n<ul>\n<li><strong>Functions are “first-class” objects</strong></li>\n<li><strong>Functions can return functions</strong></li>\n<li><strong>Lexical closures</strong></li>\n<li>Functions are “pure”</li>\n<li>Safe Recursion</li>\n<li>NO mutating state</li>\n</ul>\n<p>This is by no means an exhaustive list, but we’ve at least enumerated the three most important features of JavaScript that give it the power to be used in a “functional” way.</p>\n<p>Let’s have a look at each of these in detail:</p>\n<h2>Functions are “first-class” objects</h2>\n<p>This is perhaps the most obvious of all the ingredients, and perhaps the most common among more modern programming languages.</p>\n<p>In JavaScript local variables are defined using the <code class=\"language-text\">var</code> keyword. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var foo = &quot;bar&quot;;</code></pre></div>\n<p>It is quite easy to define functions as local variables in JavaScript.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var add = function (a, b) { return a + b; };\nvar even = function (a) { return a % 2 === 0; };</code></pre></div>\n<p>These are in fact, variables: the variables <code class=\"language-text\">add</code> and <code class=\"language-text\">even</code> are references to the function definitions they were set to, and this can be changed at any time.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// capture the old version of the function\nvar old_even = even; \n\n// assign variable `even` to a new, different function\neven = function (a) { return a &amp; 1 === 0; };</code></pre></div>\n<p>Of course, this is nothing out of the ordinary.  But an important feature of being “first-class”, is being able to pass them into functions as parameters.  For instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var binaryCall = function (f, a, b) { return f(a, b); };</code></pre></div>\n<p>This is function that takes in a binary function, and two arguments, and then calls that function with the passed in arguments.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">add(1,2) === binaryCall(add, 1, 2); // true</code></pre></div>\n<p>That may seem a bit silly, but when combined with the next “ingredient” of functional programming, we start to see some powerful results…</p>\n<h2>Functions can return functions (a.k.a, “Higher-order functions”) { #functions<em>can</em>return_functions }</h2>\n<p>This is where things start to get cool. Let’s start off simple though. Functions can end up returning new functions as their result. For instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var applyFirst = function (f, a) { \n    return function (b) { return f(a, b); };\n};</code></pre></div>\n<p>This function takes in a binary function as an argument, plus the first argument to “partially” apply to the function, and then returns a <em>unary</em> (single-argument) function that when called, will return the result of the original function with the two arguments applied.</p>\n<p>So let’s say we have some function like <code class=\"language-text\">mult</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var mult = function(a, b) { return a * b; };</code></pre></div>\n<p>We can now build on the logic of <code class=\"language-text\">mult</code> to construct a new function <code class=\"language-text\">double</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var double = applyFirst(mult, 2);\n\ndouble(32); // 64\ndouble(7.5); // 15</code></pre></div>\n<p>This is what’s called <em>partial application</em>, and is used quite often in FP.</p>\n<p>One can also define function similar to <code class=\"language-text\">applyFirst</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var curry2 = function (f) {\n    return function (a) {\n        return function (b) {\n            return f(a, b);\n        };\n    };\n};</code></pre></div>\n<p>Now, if we wanted a <code class=\"language-text\">double</code> function, we would instead do:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var double = curry2(mult)(2);</code></pre></div>\n<p>This is what’s called <a href=\"http://en.wikipedia.org/wiki/Currying\">“function currying”</a>. It’s similar to partial application, but can be a bit more powerful.</p>\n<p>I discuss <a href=\"http://tech.pro/tutorial/2011/functional-javascript-part-4-function-currying\">much more about currying</a> later in this series.</p>\n<p>This is precisely where much of the power of functional programming comes from. Simple and understandable functions become the building blocks of our software. Functions can be combined and mixed together to form more complex behavior while having a high level of organization and very little re-use of logic.</p>\n<p>Higher order functions can get a bit more fun. Let’s look at a couple more examples:</p>\n<p>Flip the order of arguments for a binary function</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// flip the argument order of a function\nvar flip = function (f) {\n    return function (a, b) { return f(b, a); };\n};\n\ndivide(10, 5) === flip(divide)(5, 10); // true</code></pre></div>\n<p>Create a function composed of other functions</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// return a function that&#39;s the composition of two functions...\n// compose (f, g)(x) -&gt; f(g(x))\nvar compose = function (f1, f2) {\n    return function (x) {\n        return f1(f2(x));\n    };\n};\n\n// abs(x) = Sqrt(x^2)\nvar abs = compose(sqrt, square);\n\nabs(-2); // 2</code></pre></div>\n<p>This example creates a utility function that we can use if we want log every time a certain function was called.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var logWrapper = function (f) {\n    return function (a) {\n        console.log(&#39;calling &quot;&#39; + f.name + &#39;&quot; with argument &quot;&#39; + a);\n        return f(a);\n    };\n};</code></pre></div>\n<div class=\"clearfix\"></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var app_init = function(config) { /* ... */ };\n\nif(DEBUG) {\n    // log the init function if in debug mode\n    app_init = logWrapper(app_init);\n}\n\n// logs to the console if in debug mode\napp_init({\n    /* ... */\n});</code></pre></div>\n<h2>Lexical Closures + Scoping</h2>\n<p>I believe understanding how to effectively utilize closures and scoping is at the core of being a great JavaScript developer.</p>\n<p>So… What is closure?</p>\n<blockquote>\n<p>Simply put, a closure is when an inner function has access to the scope of parent functions, even when the parent function has already returned.</p>\n</blockquote>\n<p>Perhaps an example is in order.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var createCounter = function () {\n    var count = 0;\n    return function () {\n        return ++count;\n    };\n};\n\nvar counter1 = createCounter();\n\ncounter1(); // 1\ncounter1(); // 2\n\nvar counter2 = createCounter();\n\ncounter2(); // 1\ncounter1(); // 3</code></pre></div>\n<p>Whenever the function <code class=\"language-text\">createCounter</code> is called, a new block of memory is allocated for the variable <code class=\"language-text\">count</code>.  Then, a function is returned which <em>holds on to</em> the reference of the <code class=\"language-text\">count</code> variable, and increments it every time it is called.</p>\n<p>Note that from outside the scope of the <code class=\"language-text\">createCounter</code> function, there is no way for us to manually manipulate the value of <code class=\"language-text\">count</code>. The <code class=\"language-text\">counter1</code> and <code class=\"language-text\">counter2</code> functions can manipulate their respective copies of the <code class=\"language-text\">count</code> variable, but only in the very specific way that was intended (incrementing by 1).</p>\n<p>In JavaScript, the boundaries of scope are determined only by <code class=\"language-text\">function</code> declarations. Each function, and only each fonction, has it’s own scope table. (Note: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.7#Block_scope_with_let_%28Merge_into_let_Statement%29\">this will change in ECMAScript 6</a> with the introduction of <code class=\"language-text\">let</code>)</p>\n<p>Some further examples to demonstrate the point:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// global scope\nvar scope = &quot;global&quot;;\n\nvar foo = function(){\n    // inner scope 1\n    var scope = &quot;inner&quot;;\n    var myscope = function(){\n        // inner scope 2\n        return scope;\n    };\n    return myscope;\n};\n\nconsole.log(foo()()); // &quot;inner&quot;\n\nconsole.log(scope); // &quot;global&quot;</code></pre></div>\n<p>There are some important things to consider with scoping. For instance, let’s say we want to create a function which accepts a digit (0 through 9) and returns the corresponding English name of that digit.</p>\n<p>Naively, one might:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// global scope...\nvar names = [&#39;zero&#39;,&#39;one&#39;,&#39;two&#39;,&#39;three&#39;,&#39;four&#39;,&#39;five&#39;,&#39;six&#39;,&#39;seven&#39;,&#39;eight&#39;,&#39;nine&#39;];\nvar digit_name1 = function(n){\n    return names[n];\n};</code></pre></div>\n<p>But this has the disadvantage that <code class=\"language-text\">names</code> is now in the global scope and can be modified accidentally, which would render the <code class=\"language-text\">digit_name1</code> function incorrect.</p>\n<p>Then one might:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var digit_name2 = function(n){\n    var names = [&#39;zero&#39;,&#39;one&#39;,&#39;two&#39;,&#39;three&#39;,&#39;four&#39;,&#39;five&#39;,&#39;six&#39;,&#39;seven&#39;,&#39;eight&#39;,&#39;nine&#39;];\n    return names[n];\n};</code></pre></div>\n<p>This creates the <code class=\"language-text\">names</code> array locally. This function isn’t in danger of being buggy, but it does come with the performance penalty of defining and re-allocating space for the <code class=\"language-text\">names</code> array each time the function <code class=\"language-text\">digit_name2</code> is called. If this were some other example where <code class=\"language-text\">names</code> was a very large array, and perhaps <code class=\"language-text\">digit_name2</code> was being called many times in a loop, the performance impact could be noticeable.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// &quot;An inner function enjoys that context even after the parent functions have returned.&quot;\nvar digit_name3 = (function(){\n    var names = [&#39;zero&#39;,&#39;one&#39;,&#39;two&#39;,&#39;three&#39;,&#39;four&#39;,&#39;five&#39;,&#39;six&#39;,&#39;seven&#39;,&#39;eight&#39;,&#39;nine&#39;];\n    return function(n){\n        return names[n];\n    };\n})();</code></pre></div>\n<p>And thus we arrive on our third option. Here we are utilizing an <a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\">Immediately-Invoked-Function-Expression</a> (IIFE), which then instantiates the <code class=\"language-text\">names</code> variable once, and returns the <code class=\"language-text\">digit_name3</code> function, which has the <code class=\"language-text\">names</code> variable in it’s closure.</p>\n<p>This solution has the benefits of both the first two examples with none of the downsides. Win!  This is a common pattern to create “private” state that cannot be modified by the outside environment.</p>\n<hr>\n<h3>Update Apr 25, 2014: What about what JavaScript DOESN’T have?</h3>\n<p>We’ve gone over the ingredients JavaScript has, but what about the three things I mentioned that it <em>doesn’t</em> have?</p>\n<ul>\n<li>Functions are “pure”</li>\n<li>NO mutating state</li>\n<li>Safe Recursion</li>\n</ul>\n<h4><strong>Pure functions and NO mutating state</strong></h4>\n<p>Pure functions have “no side effects”, which is another way of saying that there is NO mutating state. This makes your code much <em>much</em> easier to reason about, easier to test, easier to parallelize, etc…</p>\n<p>Even though you can write code that doesn’t mutate variables, this is not as useful as having the <em>guarantee</em> that it won’t happen.</p>\n<h4><strong>Safe Recursion</strong></h4>\n<p>Although you can call a function recursively in JavaScript, interpreters do not compile with tail-recursion optimizations. This means that any recursively defined function can quickly lead to stack overflow errors if you’re not careful. This makes using for/while loops as necessity in some cases (which is decidedly <em>less</em> elegant).</p>\n<hr>\n<h2>Can it get better? What’s next?</h2>\n<p>JavaScript is an incredibly flexible language. However, most of the examples in this post may be of limited utility in practical situations.</p>\n<p>For example, the <code class=\"language-text\">curry2</code> function is useful but only applies to binary functions. Most functional programming languages have currying built into the syntax, but JavaScript does not. </p>\n<p>Of course there are ways around this: JavaScript exposes useful functions like <code class=\"language-text\">Function.prototype.call</code>, <code class=\"language-text\">Function.prototype.bind</code>, and the special <code class=\"language-text\">arguments</code> object. These functions can be utilized to implement some of the more powerful conventions of functional programming (like currying). </p>\n<p>I will talk about this in much greater detail in my next post of the series:</p>\n<h3>Up Next -> <a href=\"http://tech.pro/tutorial/2010/functional-javascript-part-3-apply-call-and-the-arguments-object\">Part 3: .apply(), .call(), and the arguments object</a></h3>\n<hr>\n<h3>More From This Series:</h3>\n<ul>\n<li><a href=\"http://tech.pro/tutorial/1953/functional-javascript-part-1-introduction\">Part 1: Introduction</a></li>\n<li><a href=\"http://tech.pro/tutorial/2009/functional-javascript-part-2-what-makes-a-language-functional\">Part 2: What makes a language “functional”</a></li>\n<li><a href=\"http://tech.pro/tutorial/2010/functional-javascript-part-3-apply-call-and-the-arguments-object\">Part 3: .apply(), .call(), and the arguments object</a></li>\n<li><a href=\"http://tech.pro/tutorial/2011/functional-javascript-part-4-function-currying\">Part 4: Function Currying</a></li>\n<li>Part 5: Variadic Functions (coming soon)</li>\n<li>Part 6: 2048 Game &#x26; Solver, a “practical” example (coming soon)</li>\n<li>Part 7: Lazy sequences / collections (coming soon)</li>\n<li>Part 8: Why Argument order matters (coming soon)</li>\n<li>Part 9: Functors and Monads (coming soon)</li>\n</ul>",
      "fields": { "readingTime": { "text": "9 min read" } },
      "frontmatter": {
        "title": "Functional JavaScript, Part 2: What Makes a Language Functional?",
        "date": "April 14, 2014"
      }
    }
  },
  "pageContext": {
    "slug": "/functional-javascript-part-2-what-makes-a-language-functional/",
    "previous": {
      "fields": { "slug": "/hello-world/" },
      "frontmatter": { "title": "Lets look at some code" }
    },
    "next": {
      "fields": {
        "slug": "/functional-javascript-part-3-apply-call-and-the-arguments-object/"
      },
      "frontmatter": { "title": "Just text and links" }
    }
  }
}

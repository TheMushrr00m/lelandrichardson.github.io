{
  "data": {
    "site": {
      "siteMetadata": {
        "title": "Intelligible Babble",
        "author": "Leland Richardson"
      }
    },
    "markdownRemark": {
      "id": "b6b19ca5-1d2b-5482-9e90-9a7c7ae066f6",
      "excerpt": "In an earlier post we  played around with function currying  very briefly. Currying is absolutely essential to Functional Programming, and…",
      "html": "<p>In an earlier post we <a href=\"http://tech.pro/tutorial/2009/functional-javascript-part-2-what-makes-a-language-functional#functions_can_return_functions\">played around with function currying</a> very briefly. Currying is absolutely essential to Functional Programming, and in this post we are going to take a deep dive.</p>\n<h2>What is currying?</h2>\n<blockquote>\n<p>Currying is the process of transforming a function that takes multiple arguments into a function that takes just a single argument and returns another function if any arguments are still needed.</p>\n</blockquote>\n<p>When said like this, I think currying sounds rather simple. What would this look like in JavaScript?</p>\n<p>Let’s say we want to write a function that takes 3 arguments.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var sendMsg = function (from, to, msg) {\n    alert([&quot;Hello &quot; + to + &quot;,&quot;, msg, &quot;Sincerely,&quot;, &quot;- &quot; + from].join(&quot;\\n&quot;));\n};</code></pre></div>\n<p>For the moment, let’s assume we have some function <code class=\"language-text\">curry</code>, which turns any old JavaScript function into a curried function:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var sendMsgCurried = curry(sendMsg); // returns function(a,b,c)\n\nvar sendMsgFromJohnToBob = sendMsgCurried(&quot;John&quot;)(&quot;Bob&quot;); // returns function(c)\n\nsendMsgFromJohnToBob(&quot;Come join the curry party!&quot;); \n//=&gt; &quot;Hello Bob, Come join the curry party! Sincerely, - John&quot;</code></pre></div>\n<h2>Manual Currying</h2>\n<p>In the above example, we had some mystical <code class=\"language-text\">curry</code> function. I will get to the implementation of such a function, but in the mean time, we should first see why such a function would be needed in the first place.</p>\n<p>For instance, currying a function manually is not difficult, but it sure is verbose:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// uncurried\nvar example1 = function (a, b, c) {\n    // do something with a, b, and c\n};\n\n// curried\nvar example2 = function(a) {\n    return function (b) {\n        return function (c) {\n            // do something with a, b, and c\n        };\n    };\n};</code></pre></div>\n<p>In JavaScript, if you don’t specify all of the arguments of a function, it will be invoked anyway.  This is a neat feature of JavaScript, but it makes currying difficult and annoying.</p>\n<p>The idea is every function is a function of one parameter. If you want to have more parameters, you then must define nested functions. Yuck! Doing this once or twice is fine, but this is quite verbose and hard to read if we want to do this a lot.  (Don’t worry though, I’ll show you a way around it in a second!)</p>\n<p>Some functional programming languages, such as Haskell and OCaml, have function currying baked into the language’s syntax. In these languages, for example, <strong>every function is a function of one argument, and one argument only</strong>. You may think that such a restriction would be more annoying than helpful, but the language’s syntax is such that this restriction is virtually unnoticeable.</p>\n<p>For instance, in OCaml, one could define the <code class=\"language-text\">example</code> function like the example above in two possible ways:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let example1 = fun a b c -&gt;\n    // (* do something with a, b, c *)\n\nlet example2 = fun a -&gt;\n    fun b -&gt;\n        fun c -&gt;\n            // (* do something with a, b, c *)</code></pre></div>\n<p>It’s pretty easy to see how these two examples look analogous to the two JavaScript examples above.</p>\n<p>The difference, however, is that in OCaml <strong>these are <em>exactly</em> the same thing</strong>. In OCaml, no functions have multiple arguments. However, declaring multiple arguments in a row is “short-hand” for defining nested one-argument functions. </p>\n<p>Similarly, invoking curried functions syntactically looks the same in OCaml as what one would expect invoking a function with multiple arguments would be.  To call the functions above we would write:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">example1 foo bar baz\nexample2 foo bar baz</code></pre></div>\n<p>Whereas in JavaScript, we have the obvious difference:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">example1(foo, bar, baz);\nexample2(foo)(bar)(baz);</code></pre></div>\n<p>So in languages such as OCaml, currying is baked into the language. In JavaScript, currying is possible (higher-order functions), but the syntax is inconvenient.  This is why we decide to make a <code class=\"language-text\">curry</code> function which does the heavy lifting for us, and keeps our code succinct.</p>\n<h2>Creating a <code class=\"language-text\">curry</code> helper function</h2>\n<p>Ideally we would like to have an easy way to transform a plain-old JavaScript function (of multiple parameters) into a fully curried function.</p>\n<p>This idea is not my own, and has been done by others, for example the <code class=\"language-text\">.autoCurry()</code> function in the <a href=\"http://fitzgen.github.io/wu.js/#wu-autocurry\">wu.js library</a> (though the implementation you are about to see is my own).</p>\n<p>First, let’s create a simple helper function <code class=\"language-text\">sub_curry</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function sub_curry(fn /*, variable number of args */) {\n    var args = [].slice.call(arguments, 1);\n    return function () {\n        return fn.apply(this, args.concat(toArray(arguments)));\n    };\n}</code></pre></div>\n<p>Let’s think for a minute about what this does. It’s pretty simple. <code class=\"language-text\">sub_curry</code> accepts a function as it’s first argument, and any number of arguments following that. It then returns a function which, when applied, will take the arguments originally passed in, plus the arguments passed in when it’s invoked, and call the function.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var fn = function(a, b, c) { return [a, b, c]; };\n\n// these are all equivalent\nfn(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);\nsub_curry(fn, &quot;a&quot;)(&quot;b&quot;, &quot;c&quot;);\nsub_curry(fn, &quot;a&quot;, &quot;b&quot;)(&quot;c&quot;);\nsub_curry(fn, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;)();\n//=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code></pre></div>\n<p>Obviously, this isn’t quite what we want, but it is starting to look a little like currying.  Now we are ready to define the following <code class=\"language-text\">curry</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function curry(fn, length) {\n    // capture fn&#39;s # of parameters\n    length = length || fn.length;\n    return function () {\n        if (arguments.length &lt; length) {\n            // not all arguments have been specified. Curry once more.\n            var combined = [fn].concat(toArray(arguments));\n            return length - arguments.length &gt; 0 \n                ? curry(sub_curry.apply(this, combined), length - arguments.length)\n                : sub_curry.call(this, combined );\n        } else {\n            // all arguments have been specified, actually call function\n            return fn.apply(this, arguments);\n        }\n    };\n}</code></pre></div>\n<p>This function accepts two arguments, a function and a number of arguments to “curry”.  The second argument is optional, and if omitted, the <code class=\"language-text\">Function.prototype.length</code> property is used, which tells you the number of arguments the function was defined with.</p>\n<p>As a result, we can demonstrate the following behavior:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var fn = curry(function(a, b, c) { return [a, b, c]; });\n\n// these are all equivalent\nfn(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);\nfn(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);\nfn(&quot;a&quot;, &quot;b&quot;)(&quot;c&quot;);\nfn(&quot;a&quot;)(&quot;b&quot;, &quot;c&quot;);\nfn(&quot;a&quot;)(&quot;b&quot;)(&quot;c&quot;);\n//=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code></pre></div>\n<p>I know what you’re thinking…</p>\n<blockquote>\n<p><strong>Wait… WHAT?!</strong></p>\n</blockquote>\n<p>Is your mind blown?  It should be! We can now make functions in JavaScript curried and behave just like functions in OCaml or Haskell.  Even more, if we want to pass multiple arguments in at once, we can just separate the arguments with a comma like we did before. No need to have all those ugly parentheses between arguments, even when it is curried.</p>\n<p>This is incredibly useful, and I’m gonna talk about why in a second, but first I am going to take this <code class=\"language-text\">curry</code> function <em>just one step further</em>.</p>\n<h2>Currying with “holes”</h2>\n<p>So currying functions is great, but it causes you to put a little more thought into what the order of arguments should be for functions you define.  After all, the idea behind currying is to create new functions, with more specific functionality, out of other more general functions by partially applying them.</p>\n<p>Of course that only works if the left-most argument is the argument you want to partially apply!</p>\n<p>To remedy this, in some functional programming languages there is a special “placeholder variable” defined. It is usually assigned to the underscore <code class=\"language-text\">_</code> such that if <code class=\"language-text\">_</code> is passed in as a function argument, it is as if it was “skipped”. and is still yet to be specified.</p>\n<p>This is useful when you would like to partially apply a certain function, but the argument you would like to partially apply is not the left-most argument.</p>\n<p>For instance, we might have the function:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var sendAjax = function (url, data, options) { /* ... */ }</code></pre></div>\n<p>And we might want to define a new function which partially applies sendAjax with specific <code class=\"language-text\">options</code>, but allows <code class=\"language-text\">url</code> and <code class=\"language-text\">data</code> to be specified.</p>\n<p>Of course, we could do this pretty simply by defining the function:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var sendPost = function (url, data) {\n    return sendAjax(url, data, { type: &quot;POST&quot;, contentType: &quot;application/json&quot; });\n};</code></pre></div>\n<p>OR, using this underscore convention, what if we could just do the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var sendPost = sendAjax( _ , _ , { type: &quot;POST&quot;, contentType: &quot;application/json&quot; });</code></pre></div>\n<p>Notice the two parameters passed in with the underscore.  Obviously, this isn’t functionality that JavaScript has natively, so how would we go about doing this?</p>\n<p>Let’s go back and see if we can make our <code class=\"language-text\">curry</code> function a little bit smarter…</p>\n<p>First we define a global reference to our “placeholder” variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var _ = {};</code></pre></div>\n<p>We make it an  object literal <code class=\"language-text\">{}</code> so that we can test for reference-equality via the <code class=\"language-text\">===</code> operator later on.</p>\n<p>You could really call this whatever you’d like, but let’s keep it as <code class=\"language-text\">_</code> for simplicity. We can now define our new <code class=\"language-text\">curry</code> function as something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function curry (fn, length, args, holes) {\n    length = length || fn.length;\n    args = args || [];\n    holes = holes || [];\n    return function(){\n        var _args = args.slice(0),\n            _holes = holes.slice(0),\n            argStart = _args.length,\n            holeStart = _holes.length,\n            arg, i;\n        for(i = 0; i &lt; arguments.length; i++) {\n            arg = arguments[i];\n            if(arg === _ &amp;&amp; holeStart) {\n                holeStart--;\n                _holes.push(_holes.shift()); // move hole from beginning to end\n            } else if (arg === _) {\n                _holes.push(argStart + i); // the position of the hole.\n            } else if (holeStart) {\n                holeStart--;\n                _args.splice(_holes.shift(), 0, arg); // insert arg at index of hole\n            } else {\n                _args.push(arg);\n            }\n        }\n        if(_args.length &lt; length) {\n            return curry.call(this, fn, length, _args, _holes);\n        } else {\n            return fn.apply(this, _args);\n        }\n    }\n}</code></pre></div>\n<p>This curry function behaves almost identically to the last one, but the actual code is quite a bit different. We are now doing a bit of record keeping on where these “hole” arguments are.  All in all, though, the principals of what is going on are the same.</p>\n<p>To demonstrate our new helper, the following statements are all equivalent:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var f = curry(function(a, b, c) { return [a, b, c]; });\nvar g = curry(function(a, b, c, d, e) { return [a, b, c, d, e]; });\n\n// all of these are equivalent\nf(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);\nf(&quot;a&quot;)(&quot;b&quot;)(&quot;c&quot;);\nf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);\nf(&quot;a&quot;, _, &quot;c&quot;)(&quot;b&quot;);\nf( _, &quot;b&quot;)(&quot;a&quot;, &quot;c&quot;);\n//=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\n\n// all of these are equivalent\ng(1, 2, 3, 4, 5);\ng(_, 2, 3, 4, 5)(1);\ng(1, _, 3)(_, 4)(2)(5);\n//=&gt; [1, 2, 3, 4, 5]</code></pre></div>\n<p>Crazy, right?!</p>\n<h2>Why do I care? How is currying useful to me?</h2>\n<p>You may be sitting here thinking…</p>\n<blockquote>\n<p>This seems cool and all… but is this really going to <strong>help me write better code?</strong></p>\n</blockquote>\n<p>There are lots of reasons why function currying is useful. </p>\n<p>Function currying allows and encourages you to compartmentalize complex functionality into smaller and easier to reason about parts.  These smaller units of logic are dramatically easier to understand and test, and then your application becomes a nice and clean composition of the smaller parts.</p>\n<p>To give a simple example, let’s compare writing a naive CSV parser in Vanilla.js, Underscore.js, and “the functional way” (with full-on <code class=\"language-text\">curry</code> capabilities.</p>\n<h3>Vanilla.js (Imperative)</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//+ String -&gt; [String]\nvar processLine = function (line){\n    var row, columns, j;\n    columns = line.split(&quot;,&quot;);\n    row = [];\n    for(j = 0; j &lt; columns.length; j++) {\n        row.push(columns[j].trim());\n    }\n};\n\n//+ String -&gt; [[String]]\nvar parseCSV = function (csv){\n    var table, lines, i;  \n    lines = csv.split(&quot;\\n&quot;);\n    table = [];\n    for(i = 0; i &lt; lines.length; i++) {\n        table.push(processLine(lines[i]));\n    }\n    return table;\n};</code></pre></div>\n<h3>Underscore.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//+ String -&gt; [String]\nvar processLine = function (row) {\n    return _.map(row.split(&quot;,&quot;), function (c) {\n        return c.trim();\n    });\n};\n\n//+ String -&gt; [[String]]\nvar parseCSV = function (csv){\n    return _.map(csv.split(&quot;\\n&quot;), processLine);\n};</code></pre></div>\n<h3>The “Functional” Way</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//+ String -&gt; [String]\nvar processLine = compose( map(trim) , split(&quot;,&quot;) );\n\n//+ String -&gt; [[String]]\nvar parseCSV = compose( map(processLine) , split(&quot;\\n&quot;) );</code></pre></div>\n<p>All of these examples are equivalent in functionality.  I’ve intentionally written them to be as similar as I could possibly make them.</p>\n<p>It’s hard to be anything but subjective with examples such as this, but I really do think the last example, the “functional” way, shows some of the power behind functional programming.</p>\n<h2>Some notes on the performance of <code class=\"language-text\">curry</code></h2>\n<p>Some of the performance-minded folks out there might take a look at some of this and feel like their face is melting. I mean, look at all of this extra stuff going on?  </p>\n<p>In general, yes, using <code class=\"language-text\">curry</code> all over the place has some amount of overhead. Depending on what you are doing, this may or may not impact you in a noticeable way. That being said, I would venture to say that in <em>almost all</em> cases, your code will have performance bottlenecks in other areas before this one.</p>\n<p>With regards to performance, here are some overall things to keep in mind:</p>\n<ul>\n<li>\n<p>accessing the <code class=\"language-text\">arguments</code> object is generally much slower than accessing named arguments</p>\n</li>\n<li>\n<p>some older browsers have a very slow implementation of <code class=\"language-text\">arguments.length</code></p>\n</li>\n<li>\n<p>using <code class=\"language-text\">fn.apply( ... )</code> and <code class=\"language-text\">fn.call( ... )</code> in general is marginally slower than invoking directly like <code class=\"language-text\">fn( ... )</code></p>\n</li>\n<li>\n<p>creating lots of nested scopes and closures comes at a cost, both in memory and speed</p>\n</li>\n</ul>\n<p>In most web applications the “bottle-neck” is going to be DOM interaction. It is very unlikely that you will notice a performance hit at all.  Obviously, use the above code at your own risk.</p>\n<h2>Up Next:</h2>\n<p>I have a lot more to talk about regarding functional programming in JavaScript. Coming up in the series will be discussions on Variadic Functions, Functors, Monads, and more.</p>\n<p>Also, I’ve been asked to provide more in-depth examples of functional programming, and to do so I will be implementing the viral <a href=\"http://gabrielecirulli.github.io/2048/\">puzzle-game 2048</a>, and an AI Solver all from scratch!  Stay tuned!</p>\n<h3>More From This Series:</h3>\n<ul>\n<li><a href=\"http://tech.pro/tutorial/2009/functional-javascript-part-2-what-makes-a-language-functional\">Part 1: Introduction</a></li>\n<li><a href=\"http://tech.pro/tutorial/2009/functional-javascript-part-2-what-makes-a-language-functional\">Part 2: What makes a language “functional”</a></li>\n<li><a href=\"http://tech.pro/tutorial/2010/functional-javascript-part-3-apply-call-and-the-arguments-object\">Part 3: .apply(), .call(), and the arguments object</a></li>\n<li><a href=\"http://tech.pro/tutorial/2011/functional-javascript-part-4-function-currying\">Part 4: Function Currying</a></li>\n<li>Part 5: Variadic Functions (coming soon)</li>\n<li>Part 6: 2048 Game &#x26; Solver, a “practical” example (coming soon)</li>\n<li>Part 7: Lazy sequences / collections (coming soon)</li>\n<li>Part 8: Why Argument order matters (coming soon)</li>\n<li>Part 9: Functors and Monads (coming soon)</li>\n</ul>\n<hr>\n<blockquote>\n<p><strong>Credits:</strong><br>\nThis series has been influenced and inspired by the work of many other people I have learned from. If this post interests you, I encourage you to check out:</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=m3svKOdZijA\">Brian Lansdorf: Hey Underscore, You’re doing it wrong</a></li>\n<li><a href=\"http://osteele.com/sources/javascript/functional/\">Functional JavaScript by Oliver Steele</a></li>\n<li><a href=\"http://raganwald.com/\">Reginald Braithwaite</a> and <a href=\"https://github.com/raganwald/allong.es\">allong.es</a></li>\n<li><a href=\"http://underscorejs.org/\">Underscore.js</a></li>\n</ul>",
      "fields": { "readingTime": { "text": "13 min read" } },
      "frontmatter": {
        "title": "Functional JavaScript, Part 4: Function Currying",
        "date": "April 29, 2014"
      }
    }
  },
  "pageContext": {
    "slug": "/functional-javascript-part-4-function-currying/",
    "previous": {
      "fields": {
        "slug": "/functional-javascript-part-3-apply-call-and-the-arguments-object/"
      },
      "frontmatter": {
        "title": "Functional JavaScript, Part 3: apply, call, and the arguments object"
      }
    },
    "next": {
      "fields": { "slug": "/a-pattern-for-writing-css-to-scale/" },
      "frontmatter": { "title": "A pattern for writing CSS to scale" }
    }
  }
}
